"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3305],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=l.createContext({}),m=function(e){var t=l.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=m(e.components);return l.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},N=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),N=m(a),d=n,k=N["".concat(o,".").concat(d)]||N[d]||s[d]||r;return a?l.createElement(k,i(i({ref:t},u),{},{components:a})):l.createElement(k,i({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=N;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var m=2;m<r;m++)i[m]=a[m];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}N.displayName="MDXCreateElement"},6179:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return s}});var l=a(7462),n=a(3366),r=(a(7294),a(3905)),i=["components"],p={},o=void 0,m={permalink:"/blog/2022/7/8/pytorch_to_paddle",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-7-8-pytorch_to_paddle.md",source:"@site/blog/2022-7-8-pytorch_to_paddle.md",title:"pytorch_to_paddle",description:"- Pytorch\u7684API\u540d\u79f0\tPaddle\u7684API\u540d\u79f0",date:"2022-07-08T00:00:00.000Z",formattedDate:"July 8, 2022",tags:[],readingTime:8.21,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"linux_split_unzip",permalink:"/blog/2022/7/8/linux_split_unzip"},nextItem:{title:"torch.meshgrid",permalink:"/blog/2022/7/8/torch.meshgrid"}},u={authorsImageUrls:[]},s=[],N={toc:s};function d(e){var t=e.components,a=(0,n.Z)(e,i);return(0,r.kt)("wrapper",(0,l.Z)({},N,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pytorch\u8f6cpaddle"},"pytorch\u8f6cpaddle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Pytorch\u7684API\u540d\u79f0\tPaddle\u7684API\u540d\u79f0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.abs\tfluid.layers.abs(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.acos\tfluid.layers.acos(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.add\tfluid.layers.elementwise_add(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.allclose\tfluid.layers.allclose")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.arange\tfluid.layers.range(start, end, step, dtype)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.argmax\tfluid.layers.argmax")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.argmin\tfluid.layers.argmin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.argsort\tfluid.layers.argsort(input, axis=-1, descending=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.as_strided\tfluid.layers.strided_slice(input, axes, starts, ends, strides):")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.asin\tfluid.layers.asin(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.atan\tfluid.layers.atan(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.cat\tfluid.layers.concat(input, axis=0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.ceil\tfluid.layers.ceil")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.chunk\tfluid.layers.unstack(x, axis=0, num=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.cos\tfluid.layers.cos")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.cumsum\tfluid.layers.cumsum(x, axis=None, exclusive=None, reverse=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.diag\tfluid.layer.diag(diagonal)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.diag_embed\tfluid.layer.diag_embed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.div\tfluid.layers.elementwise_div(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.eq\tfluid.layers.equal(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.equal\tfluid.layers.elementwise_equal(x, y, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.equal\tfluid.layers.equal(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.erf\tfluid.layers.erf(x)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.exp\tfluid.layers.exp(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.eye\tfluid.layers.eye(num_rows, num_columns=None, batch_shape=None, dtype=\u2018float32\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.flatten\tfluid.layers.flatten")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.flip\tfluid.layers.flip")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.floor\tfluid.layers.floor(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.fmod\tfluid.layers.elementwise_mod(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.from_numpy\tfluid.dygraph.to_variable(value, block=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.full\tfluid.layers.full(shape, fill_value, out=None, dtype=None, device=None, stop_gradient=True, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.full_like\tfluid.layers.full_like")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.gather\tfluid.layers.gather(input, axis, index, out=None, sparse_grad=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.ge\tfluid.layers.greater_equal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.gt\tfluid.layers.greater_than")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.le\tfluid.layers.less_equal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.linspace\tfluid.layers.linspace(start, stop, num, dtype)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.log\tfluid.layers.log(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.logical_not\tfluid.layers.logical_not(x, out=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.logical_xor\tfluid.layers.logical_xor(x, y, out=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.lt\tfluid.layers.less_than")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.masked_select\tfluid.layers.masked_select")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.matmul\tfluid.layers.matmul(x, y, transpose_x=False, transpose_y=False, alpha=1.0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.max\tfluid.layers.max(input, axis=None, keepdim=False, out=None, name=None) -> (Tensor, LongTensor)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.mean\tfluid.layers.reduce_mean(input, dim=None, keep_dim=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.min\tfluid.layers.min")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.mm\tfluid.layers.mm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.mul\tfluid.layers.mul")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.mv\tfluid.layers.matmul(x, y, transpose_x=False, transpose_y=False, alpha=1.0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.ne\tfluid.layers.not_equal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.AdaptiveAvgPool2d\tfluid.layers.adaptive_pool2d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.AdaptiveAvgPool3d\tfluid.layers.adaptive_pool3d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.AdaptiveMaxPool2d\tfluid.layers.adaptive_pool2d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.AdaptiveMaxPool3d\tfluid.layers.adaptive_pool3d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.add_module\tfluid.dygraph.Layer.add_sublayer(name, sublayer)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.append\tfluid.dygraph.LayerList.append(sublayer)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.append\tfluid.dygraph.ParameterList.append(parameter)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.AvgPool2d\tfluid.layers.pool2d(pool_type\u4e3a\u2019avg\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.AvgPool3d\tfluid.layers.pool3d(pool_type\u4e3a\u2019avg\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.BatchNorm1d\tfluid.layers.batch_norm(input, act=None, is_test=False, momentum=0.9, epsilon=1e-05, param_attr=None, bias_attr=None, data_layout=\u2018NCHW\u2019, in_place=False, name=None, moving_mean_name=None, moving_variance_name=None, do_model_average_for_mean_and_var=False, use_global_stats=False)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.BatchNorm2d\tfluid.layers.batch_norm(input, act=None, is_test=False, momentum=0.9, epsilon=1e-05, param_attr=None, bias_attr=None, data_layout=\u2018NCHW\u2019, in_place=False, name=None, moving_mean_name=None, moving_variance_name=None, do_model_average_for_mean_and_var=False, use_global_stats=False)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.BatchNorm3d\tfluid.layers.batch_norm(input, act=None, is_test=False, momentum=0.9, epsilon=1e-05, param_attr=None, bias_attr=None, data_layout=\u2018NCHW\u2019, in_place=False, name=None, moving_mean_name=None, moving_variance_name=None, do_model_average_for_mean_and_var=False, use_global_stats=False)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Bilinear\tfluid.layers.bilinear_tensor_product(x, y, size, act=None, name=None, param_attr=None, bias_attr=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ConstantPad1d\tfluid.layers.pad")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ConstantPad2d\tfluid.layers.pad / fluid.layers.pad2d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ConstantPad3d\tfluid.layers.pad")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Conv2d\tfluid.dygraph.Conv2D")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Conv3d\tfluid.dygraph.Conv3D")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ConvTranspose2d\tfluid.layers.conv2d_transpose")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ConvTranspose3d\tfluid.layers.conv3d_transpose")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.double\tfluid.layers.cast(x, dtype)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Dropout\tfluid.layers.dropout(x, dropout_prob, is_test=False, seed=None, name=None, dropout_implementation=\u2018downgrade_in_infer\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ELU\tfluid.layers.elu(x, alpha=1.0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Embedding\tfluid.dygraph.Embedding")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.eval\tfluid.dygraph.Layer.eval()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.float\tfluid.layers.cast(x, dtype)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Fold\tfluid.layers.unfold")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.adaptive_avg_pool2d\tfluid.layers.adaptive_pool2d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.adaptive_avg_pool3d\tfluid.layers.adaptive_pool3d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.adaptive_max_pool2d\tfluid.layers.adaptive_pool2d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.adaptive_max_pool3d\tfluid.layers.adaptive_pool3d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.affine_grid\tfluid.layers.affine_grid")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.avg_pool2d\tfluid.layers.pool2d(input, pool_size=-1, pool_type=\u201cmax\u201d, pool_stride=1, pool_padding=0, global_pooling=False, use_cudnn=True, ceil_mode=False, name=None, exclusive=True, data_format=\u201cNCHW\u201d)\u8bbe\u7f6epool_type=\u201cavg\u201d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.avg_pool3d\tfluid.layers.pool3d(input, pool_size=-1, pool_type=\u201cmax\u201d, pool_stride=1, pool_padding=0, global_pooling=False, use_cudnn=True, ceil_mode=False, name=None, exclusive=True, data_format=\u201cNCDHW\u201d)\u8bbe\u7f6epool_type=\u201cavg\u201d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.cross_entropy\tfluid.layers.softmax_with_cross_entropy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.ctc_loss\tfluid.layers.warpctc")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.elu\tfluid.layers.elu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.embedding\tfluid.embedding")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.embedding_bag\tfluid.contrib.fused_embedding_seq_pool")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.glu\tfluid.nets.glu(input, dim=-1)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.grid_sample\tfluid.layers.grid_sampler")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.hardshrink\tfluid.layers.hard_shrink")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.interpolate\tfluid.layers.interpolate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.kl_div\tfluid.layers.kldiv_loss")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.leaky_relu\tfluid.layers.leaky_relu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.logsigmoid\tfluid.layers.logsigmoid")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.margin_ranking_loss\tfluid.layers.margin_rank_loss(label, left, right, margin=0.1, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.max_pool2d\tfluid.layers.pool2d(input, pool_size=-1, pool_type=\u201cmax\u201d, pool_stride=1, pool_padding=0, global_pooling=False, use_cudnn=True, ceil_mode=False, name=None, exclusive=True, data_format=\u201cNCHW\u201d)\u8bbe\u7f6epool_type=\u201cmax\u201d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.max_pool3d\tfluid.layers.pool3d(input, pool_size=-1, pool_type=\u201cmax\u201d, pool_stride=1, pool_padding=0, global_pooling=False, use_cudnn=True, ceil_mode=False, name=None, exclusive=True, data_format=\u201cNCDHW\u201d)\u8bbe\u7f6epool_type=\u201cmax\u201d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.mse_loss\tfluid.layers.mse_loss(input, label)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.one_hot\tfluid.one_hot")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.pad\tfluid.layers.pad(x, paddings, pad_value=0.0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.pixel_shuffle\tfluid.layers.pixel_shuffle(x, upscale_factor)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.prelu\tfluid.layers.prelu(x, mode, param_attr=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.relu\tfluid.layers.relu(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.relu6\tfluid.layers.relu6")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.selu\tfluid.layers.selu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.sigmoid\tfluid.layers.sigmoid")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.smooth_l1_loss\tfluid.layers.smooth_l1(x, y, inside_weight=None, outside_weight=None, sigma=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.softmax\tfluid.layers.softmax")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.softplus\tfluid.layers.softplus")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.softshrink\tfluid.layers.softshrink")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.softsign\tfluid.layers.softsign")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.tanh\tfluid.layers.tanh")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.tanhshrink\tfluid.layers.tanh_shrink")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.threshold\tfluid.layers.thresholded_relu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.functional.unfold\tfluid.layers.unfold(x, kernel_size, strides=1, paddings=0, dilation=1, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.GroupNorm\tfluid.layers.group_norm(input, groups, epsilon=1e-05, param_attr=None, bias_attr=None, act=None, data_layout=\u2018NCHW\u2019, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.GRU\tfluid.layers.dynamic_gru")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.GRUCell\tfluid.layers.GRUCell")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.half\tfluid.layers.cast(x, dtype)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Hardshrink\tfluid.layers.hard_shrink(x, threshold=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.constant_\tfluid.initializer.ConstantInitializer(value=0.0, force_cpu=False)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.eye_\tfluid.layers.eye(num_rows, num_columns=None, batch_shape=None, dtype=\u2018float32\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.kaiming",(0,r.kt)("em",{parentName:"p"},"normal"),"\tfluid.initializer.MSRAInitializer(uniform=True, fan_in=None, seed=0)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.kaiming",(0,r.kt)("em",{parentName:"p"},"uniform"),"\tfluid.initializer.MSRAInitializer(uniform=True, fan_in=None, seed=0)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.normal_\tfluid.initializer.NormalInitializer(loc=0.0, scale=1.0, seed=0)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.ones_\tfluid.layers.ones(shape, dtype, force_cpu=False)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.uniform_\tfluid.initializer.UniformInitializer(low=-1.0, high=1.0, seed=0)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.xavier",(0,r.kt)("em",{parentName:"p"},"normal"),"\tfluid.initializer.XavierInitializer(uniform=True, fan_in=None, fan_out=None, seed=0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.xavier",(0,r.kt)("em",{parentName:"p"},"uniform"),"\tfluid.initializer.XavierInitializer(uniform=True, fan_in=None, fan_out=None, seed=0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.init.zeros_\tfluid.layers.zeros(shape, dtype, force_cpu=False)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.InstanceNorm1d\tfluid.layers.instance_norm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.InstanceNorm2d\tfluid.layers.instance_norm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.InstanceNorm3d\tfluid.layers.instance_norm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.LayerNorm\tfluid.layers.layer_norm(input, scale=True, shift=True, begin_norm_axis=1, epsilon=1e-05, param_attr=None, bias_attr=None, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.LeakyReLU\tfluid.layers.leaky_relu(x, alpha=0.02, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Linear\tfluid.dygraph.Linear(input_dim, output_dim, param_attr=None, bias_attr=None, act=None, dtype=\u2018float32\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.load_state_dict\tfluid.dygraph.Layer.set_dict(stat_dict, include_sublayers=True)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.LogSigmoid\tfluid.layers.logsigmoid(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.LSTM\tfluid.layers.lstm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.LSTMCell\tfluid.layers.LSTMCell")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.MarginRankingLoss\tfluid.layers.margin_rank_loss(label, left, right, margin=0.1, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.MaxPool2d\tfluid.layers.pool2d(pool_type\u4e3a\u2019max\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.MaxPool3d\tfluid.layers.pool3d(pool_type\u4e3a\u2019max\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Module\tfluid.dygraph.Layer()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.modules\tfluid.dygraph.Layer.sublayers(include_sublayers=True)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.MSELoss\tfluid.dygraph.MSELoss(input, label)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.MultiheadAttention\tfluid.nets.scaled_dot_product_attention")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.named_modules\tfluid.dygraph.Layer.named_sublayers(prefix=\u2019\u2019,include_sublayers=True,include_self=False,layers_set=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.named_parameters\tfluid.dygraph.Layer.named_parameters(prefix=\u2019\u2019, include_sublayers=True)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ParameterList\tfluid.dygraph.ParameterList")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.parameters\tfluid.dygraph.Layer.parameters(include_sublayers=True)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.PixelShuffle\tfluid.layers.pixel_shuffle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.PReLU\tfluid.dygraph.Prelu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ReflectionPad2d\tfluid.layers.pad2d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.register_parameter\tfluid.dygraph.Layer.add_parameter(name, parameter)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ReLU\tfluid.layers.relu(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ReLU6\tfluid.layers.relu6")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ReplicationPad2d\tfluid.layers.pad2d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.requires",(0,r.kt)("em",{parentName:"p"},"grad"),"\tfluid.Variable().stop_gradient")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.RNN\tfluid.layers.rnn")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.RNNCell\tfluid.layers.RNNCell")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.SELU\tfluid.layers.selu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Sequential\tfluid.dygraph.Sequential(*layers)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Sigmoid\tfluid.layers.sigmoid(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.SmoothL1Loss\tfluid.layers.smooth_l1(x, y, inside_weight=None, outside_weight=None, sigma=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Softmax\tfluid.layers.softmax(input, use_cudnn=False, name=None, axis=-1)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Softplus\tfluid.layers.softplus")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Softshrink\tfluid.layers.softshrink(x, alpha=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Softsign\tfluid.layers.softsign(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.state_dict\tfluid.dygraph.Layer.state_dict")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Tanh\tfluid.layers.tanh(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Tanhshrink\tfluid.layers.tanh_shrin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.Threshold\tfluid.layers.thresholded_relu(x, threshold=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.train\tfluid.dygraph.Layer.train()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.type\tfluid.layers.cast(x, dtype)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.UpsamplingBilinear2d\tfluid.layers.resize_bilinear")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.UpsamplingNearest2d\tfluid.layers.resize_nearest")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.zero_grad\tfluid.dygraph.Layer.clear_gradients()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.nn.ZeroPad2d\tfluid.layers.pad / fluid.layers.pad2d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.norm\tfluid.layers.l2_normalize")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.normal\tfluid.layers.gaussian_random(shape, mean=0.0, std=1.0, seed=0, dtype=\u2018float32\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.numel\tfluid.layers.size(input)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.ones\tfluid.layers.ones")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.ones_like\tfluid.layers.ones_like")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.pow\tfluid.layers.pow")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.prod\tfluid.layers.reduce_prod(input, dim=None, keep_dim=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.rand_like\tfluid.layers.gaussian_random_batch_size_like(input, shape, input_dim_idx=0, output_dim_idx=0, mean=0.0, std=1.0, seed=0, dtype=\u2018float32\u2019)[")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.randint\tfluid.layers.randint(low, high=None, shape=None, out=None, dtype=None, device=None, stop_gradient=False, seed=0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.randn\tfluid.layers.randn")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.randn_like\tfluid.layers.gaussian_random_batch_size_like")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.randperm\tfluid.layers.randperm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.range\tfluid.layers.range")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.reciprocal\tfluid.layers.reciprocal(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.reshape\tfluid.layers.reshape(x, shape, actual_shape=None, act=None, inplace=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.roll\tfluid.layers.roll")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.round\tfluid.layers.round(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.rsqrt\tfluid.layers.rsqrt(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.seed\tfluid.Program.random_seed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.set_num_interop_threads\tfluid.ExecutionStrategy.num_threads")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.set_num_threads\tfluid.cpu_places(device_count=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.sigmoid\tfluid.layers.sigmoid(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.sign\tfluid.layers.sign(x)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.sin\tfluid.layers.sin(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.split\tfluid.layers.split(input, num_or_sections, dim=-1, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.sqrt\tfluid.layers.squeeze(input, axes, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.squeeze\tfluid.layers.squeeze(input, axes, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.stack\tfluid.layers.stack(x, axis=0)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.std_mean\tfluid.layers.mean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.sum\tfluid.layers.sum(x)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.sum\tfluid.layers.elementwise_add(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.tan\tfluid.layers.tanh(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.tanh\tfluid.layers.tanh(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.abs\tfluid.layers.abs(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.abs_\tfluid.layers.abs(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.acos\tfluid.layers.acos(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.acos_\tfluid.layers.acos(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.add_\tfluid.layers.elementwise_add(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.asin_\tfluid.layers.asin(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.atan_\tfluid.layers.atan(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.backward\tfluid.gradients(targets, inputs, target_gradients=None, no_grad_set=None)paddle \u76ee\u6807\u53d8\u91cf\u548c\u8d77\u59cb")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.bfloat16\tfluid.layers.cast(x, float16)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.bmm\tfluid.layers.matmul")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.bool\tfluid.layers.cast(x, bool)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.byte\tfluid.layers.cast(x, uint8)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.ceil\tfluid.layers.ceil")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.clamp\tfluid.layers.clip")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.clamp_\tfluid.layers.clip(x, min, max, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.clone\tfluid.layers.assign(input, output=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.cos\tfluid.layers.cos")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.cumsum\tfluid.layers.cumsum")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.dequantize\tfluid.layers.dequantize()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.diag\tfluid.layers.diag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.div\tfluid.layers.elementwise_div(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.eq\tfluid.layers.equal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.eq_\tfluid.layers.equal(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.exp\tfluid.layers.exp(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.exp_\tfluid.layers.exp(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.expand\tfluid.layers.expand(x, expand_times, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.expand_as\tfluid.layers.expand_as(x, target_tensor, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.fill",(0,r.kt)("em",{parentName:"p"},"diagonal"),"\tfluid.layers.diag(diagonal)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.flatten\tfluid.layers.flatten")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.flip\tfluid.layers.reverse")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.floor\tfluid.layers.floor")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.floor_\tfluid.layers.floor(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.fmod_\tfluid.layers.elementwise_mod(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.gather\tfluid.layers.gather(input, index, overwrite=True)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.ge\tfluid.layers.greater_equal(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.ge_\tfluid.layers.greater_equal(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.gt\tfluid.layers.greater_than(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.gt_\tfluid.layers.greater_than(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.hardshrink\tfluid.layers.hard_shrink(x, threshold=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.index_select\tfluid.layers.multiplex(inputs, index)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.int\tfluid.layers.cast")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.le\tfluid.layers.less_equal(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.le_\tfluid.layers.less_equal(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.log\tfluid.layers.log(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.log_\tfluid.layers.log(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.logical_not\tfluid.layers.logical_not(x, out=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.logical",(0,r.kt)("em",{parentName:"p"},"not"),"\tfluid.layers.logical_not(x, out=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.logical_xor\tfluid.layers.logical_xor(x, y, out=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.logical",(0,r.kt)("em",{parentName:"p"},"xor"),"\tfluid.layers.logical_xor(x, y, out=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.lt\tfluid.layers.less_than(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.lt_\tfluid.layers.less_than(x, y, force_cpu=None, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.masked_select\tfluid.layers.masked_select(input, mask)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.matmul\tfluid.layers.matmul(x, y, transpose_x=False, transpose_y=False, alpha=1.0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.matrix_power\tfluid.layers.pow(x, factor=1.0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.max\tfluid.layers.reduce_max(input, dim=None, keep_dim=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.mean\tfluid.layers.mean(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'torch.Tensor.min\t"fluid.layers.reduce_min(input, dim=None, keep_dim=False, name=None) "')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.mul\tfluid.layers.mul(x, y, x_num_col_dims=1, y_num_col_dims=1, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.mul_\tfluid.layers.mul(x, y, x_num_col_dims=1, y_num_col_dims=1, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.multinomial\tfluid.layers.sampling_id(x, min=0.0, max=1.0, seed=0, dtype=\u2018float32\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.mv\tfluid.layers.mul(x, y, x_num_col_dims=1, y_num_col_dims=1, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.narrow_copy\tfluid.layers.slice(input, axes, starts, ends)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.ndimension\tfluid.layers.rank(input)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.ne_\tfluid.layers.not_equal(x, y, cond=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.normal_\tfluid.layers.Normal(loc, scale)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.numel\tfluid.layers.size(input)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.permute\tfluid.layers.transpose(x, perm, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.pow\tfluid.layers.pow(x, factor=1.0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.pow_\tfluid.layers.pow(x, factor=1.0, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.prod\tfluid.layers.reduce_prod(input, dim=None, keep_dim=False, name=None)[")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.put_\tfluid.layers.scatter(input, index, updates, name=None, overwrite=True)","[\u6e90\u4ee3\u7801]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.random_\tfluid.layers.uniform_random(shape, dtype=\u2018float32\u2019, min=-1.0, max=1.0, seed=0)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.reciprocal\tfluid.layers.reciprocal(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.reciprocal_\tfluid.layers.reciprocal(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.remainder_\tfluid.layers.elementwise_mod(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.requires_grad\tfluid.Variable.stop_gradient(\u5c5e\u6027)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.requires",(0,r.kt)("em",{parentName:"p"},"grad"),"\tfluid.Variable.stop_gradient(\u5c5e\u6027)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.reshape\tfluid.layers.reshape(x, shape, actual_shape=None, act=None, inplace=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.reshape_as\tfluid.layers.reshape(x, shape, actual_shape=None, act=None, inplace=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.resize",(0,r.kt)("em",{parentName:"p"},"as"),"\tfluid.layers.reshape(x, shape, actual_shape=None, act=None, inplace=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.round\tfluid.layers.round(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.round_\tfluid.layers.round(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.rsqrt\tfluid.layers.rsqrt(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.rsqrt_\tfluid.layers.rsqrt(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.scatter\tfluid.layers.scatter(input, index, updates, name=None, overwrite=True)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.scatter_\tfluid.layers.scatter(input, index, updates, name=None, overwrite=True)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.scatter_add\tfluid.layers.scatter(input, index, updates, name=None, overwrite=True)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.scatter",(0,r.kt)("em",{parentName:"p"},"add"),"\tfluid.layers.scatter(input, index, updates, name=None, overwrite=True)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.select\tfluid.layers.slice")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.short\tfluid.layers.cast(x, dtype)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sigmoid\tfluid.layers.sigmoid(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sigmoid_\tfluid.layers.sigmoid(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sign\tfluid.layers.sign(x)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sign_\tfluid.layers.sign(x)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sin\tfluid.layers.sin(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sin_\tfluid.layers.sin(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.split\tfluid.layers.split(input, num_or_sections, dim=-1, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sqrt\tfluid.layers.sqrt(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sqrt_\tfluid.layers.sqrt(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.squeeze\tfluid.layers.squeeze(input, axes, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.squeeze_\tfluid.layers.squeeze(input, axes, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sub\tfluid.layers.elementwise_sub(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sub_\tfluid.layers.elementwise_sub(x, y, axis=-1, act=None, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.sum\tfluid.layers.sum(x)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.t_\tfluid.layers.transpose(x, perm, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.tanh\tfluid.layers.tanh(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.tanh_\tfluid.layers.tanh(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.to\tfluid.layers.cast(x, dtype)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.topk\tfluid.layers.topk(input, k, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.transpose\tfluid.layers.transpose(x, perm, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.transpose_\tfluid.layers.transpose(x, perm, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.trunc\tfluid.layers.floor(x, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.unbind\tfluid.layers.unstack(x, axis=0, num=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.unique\tfluid.layers.unique")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.unsqueeze\tfluid.layers.unsqueeze")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.unsqueeze_\tfluid.layers.unsqueeze(input, axes, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.view\tfluid.layers.reshape(x, shape, actual_shape=None, act=None, inplace=False, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.where\tfluid.layers.where")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.Tensor.zero_\tfluid.layers.zeros(shape, dtype, force_cpu=False)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.topk\tfluid.layers.topk(input, k, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.transpose\tfluid.layers.transpose(x, perm, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.tril\tfluid.layers.tril")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.triu\tfluid.layers.triu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.unique\tfluid.layers.unique(x, dtype=\u2018int32\u2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.unsqueeze\tfluid.layers.unsqueeze(input, axes, name=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.var_mean\tfluid.layers.mean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.where\tfluid.layers.where(condition)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.zeros\tfluid.layers.zeros(shape, dtype, force_cpu=False)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.zeros_like\tfluid.layers.zeros_like(x, out=None)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.utils.data.dataloader.default_collate\tfluid.io.default_collate_fn")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.optim.lr_scheduler.StepLR\tfluid.dygraph.StepDecay")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.clamp\tfluid.layers.clip")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.meshgrid\tfluid.layers.meshgrid")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.view\tfluid.layers.reshape")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.repeat\tfluid.layers.expand")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.from_numpy\tfluid.dygraph.to_variable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"torch.type_as\tfluid.layers.cast")),(0,r.kt)("li",{parentName:"ul"})))}d.isMDXComponent=!0}}]);